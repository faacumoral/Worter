@page "/students-login"
@layout EmptyLayout
@inject APIClient APIClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@using Worter.DTO.Login

<div class="content row d-flex justify-content-center" style="text-align: center;">
    <div class="col-12">
        <div class="row form-row">
            <div class="col-12">
                <h1>Welcome</h1>
            </div>
        </div>
        <div class="row form-row">
            <div class="col-12">
                <input placeholder="username" class="form-control" @bind="credentials.Username" />
            </div>
        </div>
        <div class="row form-row">
            <div class="col-12">
                <input placeholder="password" type="password" class="form-control" @bind="credentials.Password" />
            </div>
        </div>
        <div class="row form-row">
            <div class="col-12">
                <button disabled="@requestSent" class="btn btn-success" @onclick="DoLogin">Login</button>
            </div>
        </div>
        @if (requestSent)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }

        @if (loginResponse != null && loginResponse.ResultError != null)
        {
            <div class="row form-row">
                <div class="col-4"></div>
                <div class="col-4">
                    <div class="card text-white bg-danger">
                        <div class="card-body">
                            <p class="card-text text-white">
                                @loginResponse.ResultError.FriendlyErrorMessage
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code {
    private StringResult loginResponse;
    private StudentLoginRequest credentials = new StudentLoginRequest();
    private bool requestSent = false;

    private async Task DoLogin()
    {
        loginResponse = null;

        var apiRequest = Request.BuildPost("Login/Student", credentials, false);

        requestSent = true;
        loginResponse = await APIClient.Send<StringResult>(apiRequest);

        requestSent = false;

        if (loginResponse.Success)
        {
            await sessionStorage.SetJwtToken(loginResponse.ResultOk);
            NavigationManager.NavigateTo(Constants.Views.INDEX);
        }
    }
}
